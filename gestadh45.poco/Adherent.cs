//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace gestadh45.poco
{
    public partial class Adherent
    {
        #region Primitive Properties
    
        public virtual long ID
        {
            get;
            set;
        }
    
        public virtual string Nom
        {
            get;
            set;
        }
    
        public virtual string Prenom
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateNaissance
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateCreation
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateModification
        {
            get;
            set;
        }
    
        public virtual long ID_Sexe
        {
            get { return _iD_Sexe; }
            set
            {
                if (_iD_Sexe != value)
                {
                    if (Sexe != null && Sexe.ID != value)
                    {
                        Sexe = null;
                    }
                    _iD_Sexe = value;
                }
            }
        }
        private long _iD_Sexe;
    
        public virtual string Commentaire
        {
            get;
            set;
        }
    
        public virtual string Adresse
        {
            get;
            set;
        }
    
        public virtual long ID_Ville
        {
            get { return _iD_Ville; }
            set
            {
                if (_iD_Ville != value)
                {
                    if (Ville != null && Ville.ID != value)
                    {
                        Ville = null;
                    }
                    _iD_Ville = value;
                }
            }
        }
        private long _iD_Ville;
    
        public virtual string Telephone1
        {
            get;
            set;
        }
    
        public virtual string Telephone2
        {
            get;
            set;
        }
    
        public virtual string Telephone3
        {
            get;
            set;
        }
    
        public virtual string Mail1
        {
            get;
            set;
        }
    
        public virtual string Mail2
        {
            get;
            set;
        }
    
        public virtual string Mail3
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Sexe Sexe
        {
            get { return _sexe; }
            set
            {
                if (!ReferenceEquals(_sexe, value))
                {
                    var previousValue = _sexe;
                    _sexe = value;
                    FixupSexe(previousValue);
                }
            }
        }
        private Sexe _sexe;
    
        public virtual Ville Ville
        {
            get { return _ville; }
            set
            {
                if (!ReferenceEquals(_ville, value))
                {
                    var previousValue = _ville;
                    _ville = value;
                    FixupVille(previousValue);
                }
            }
        }
        private Ville _ville;
    
        public virtual ICollection<Inscription> Inscription
        {
            get
            {
                if (_inscription == null)
                {
                    var newCollection = new FixupCollection<Inscription>();
                    newCollection.CollectionChanged += FixupInscription;
                    _inscription = newCollection;
                }
                return _inscription;
            }
            set
            {
                if (!ReferenceEquals(_inscription, value))
                {
                    var previousValue = _inscription as FixupCollection<Inscription>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupInscription;
                    }
                    _inscription = value;
                    var newValue = value as FixupCollection<Inscription>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupInscription;
                    }
                }
            }
        }
        private ICollection<Inscription> _inscription;

        #endregion
        #region Association Fixup
    
        private void FixupSexe(Sexe previousValue)
        {
            if (previousValue != null && previousValue.Adherent.Contains(this))
            {
                previousValue.Adherent.Remove(this);
            }
    
            if (Sexe != null)
            {
                if (!Sexe.Adherent.Contains(this))
                {
                    Sexe.Adherent.Add(this);
                }
                if (ID_Sexe != Sexe.ID)
                {
                    ID_Sexe = Sexe.ID;
                }
            }
        }
    
        private void FixupVille(Ville previousValue)
        {
            if (previousValue != null && previousValue.Adherent.Contains(this))
            {
                previousValue.Adherent.Remove(this);
            }
    
            if (Ville != null)
            {
                if (!Ville.Adherent.Contains(this))
                {
                    Ville.Adherent.Add(this);
                }
                if (ID_Ville != Ville.ID)
                {
                    ID_Ville = Ville.ID;
                }
            }
        }
    
        private void FixupInscription(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Inscription item in e.NewItems)
                {
                    item.Adherent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Inscription item in e.OldItems)
                {
                    if (ReferenceEquals(item.Adherent, this))
                    {
                        item.Adherent = null;
                    }
                }
            }
        }

        #endregion
    }
}
